/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipse.bpmn2.validation;

import org.eclipse.bpmn2.BoundaryEvent;
import org.eclipse.bpmn2.DataInputAssociation;
import org.eclipse.bpmn2.DataOutputAssociation;
import org.eclipse.bpmn2.InputOutputSpecification;
import org.eclipse.bpmn2.LoopCharacteristics;
import org.eclipse.bpmn2.Property;
import org.eclipse.bpmn2.ResourceRole;
import org.eclipse.bpmn2.SequenceFlow;

import org.eclipse.emf.common.util.EList;

/**
 * A sample validator interface for {@link org.eclipse.bpmn2.Activity}.
 * This doesn't really do anything, and it's not a real EMF artifact.
 * It was generated by the org.eclipse.emf.examples.generator.validator plug-in to illustrate how EMF's code generator can be extended.
 * This can be disabled with -vmargs -Dorg.eclipse.emf.examples.generator.validator=false.
 */
public interface ActivityValidator {
    boolean validate();

    boolean validateIsForCompensation(boolean value);

    boolean validateLoopCharacteristics(LoopCharacteristics value);

    boolean validateResources(EList<ResourceRole> value);

    boolean validateDefault(SequenceFlow value);

    boolean validateProperties(EList<Property> value);

    boolean validateIoSpecification(InputOutputSpecification value);

    boolean validateBoundaryEventRefs(EList<BoundaryEvent> value);

    boolean validateDataInputAssociations(EList<DataInputAssociation> value);

    boolean validateDataOutputAssociations(EList<DataOutputAssociation> value);

    boolean validateStartQuantity(int value);

    boolean validateCompletionQuantity(int value);
}
